# -*- coding: utf-8 -*-
"""bnn_mnist.ipynb

Automatically generated by Colaboratory.

"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib.pyplot as plt
import sklearn
import sklearn.datasets as datasets
import sklearn.linear_model

import copy as copy 

# %config InlineBackend.figure_format = 'retina'
# %config InlineBackend.print_figure_kwargs={'facecolor' : "w"}

digital = [[-1,-1,-1], [-1,-1,1], [-1,1,-1], [-1,1,1]
           ,[1,-1,-1], [1,-1,1], [1,1,-1],[1,1,1]]

digital_5_bit = [[0,0,0,0,0], [0,0,0,0,1], [0,0,0,1,0], [0,0,0,1,1]
           ,[0,0,1,0,0], [0,0,1,0,1], [0,0,1,1,0],[0,0,1,1,1],
           [0,1,0,0,0], [0,1,0,0,1], [0,1,0,1,0], [0,1,0,1,1]
           ,[0,1,1,0,0], [0,1,1,0,1], [0,1,1,1,0],[0,1,1,1,1],
           [1,0,0,0,0], [1,0,0,0,1], [1,0,0,1,0], [1,0,0,1,1]
           ,[1,0,1,0,0], [1,0,1,0,1], [1,0,1,1,0],[1,0,1,1,1],
           [1,1,0,0,0], [1,1,0,0,1], [1,1,0,1,0], [1,1,0,1,1]
           ,[1,1,1,0,0], [1,1,1,0,1], [1,1,1,1,0],[1,1,1,1,1]]

digital_4_bit = [[0,0,0,0], [0,0,0,1], [0,0,1,0], [0,0,1,1]
           ,[0,1,0,0], [0,1,0,1], [0,1,1,0],[0,1,1,1],
           [1,0,0,0], [1,0,0,1], [1,0,1,0], [1,0,1,1]
           ,[1,1,0,0], [1,1,0,1], [1,1,1,0],[1,1,1,1]]

digital_3_bit = [[0,0,0], [0,0,1], [0,1,0], [0,1,1]
           ,[1,0,0], [1,0,1], [1,1,0],[1,1,1]]

def quant(a, bit_):
  val = 2/(2** bit_)
  start = -1
  for i in range(0, 2**bit_):
    if start <= a and a <= (start +  val):
      return digital[i]
      # return start
    start += val


def plot_quant(a, bit_):
  val = 2/(2** bit_)
  start = -1
  for i in range(0, 2**bit_):
    if start <= a and a <= (start +  val):
      return start
    start += val

np.random.seed(42) # set a seed so that the results are consistent

N =500 # number of points per class
D = 2 # dimensionality 
K = 2 # number of spokes
bit = 3

X = np.zeros((N*K,D)) # data matrix (each row = single example)
Y = np.zeros(N*K, dtype='int') # class labels

for j in range(K):
    ix = range(N*j,N*(j+1))
    r = np.linspace(0, 1, N) # radius
    t = np.linspace(j*4.2, (j+1)*4.2, N) + np.random.randn(N)*0.2 # theta
    X[ix] = np.c_[r*np.sin(t), r*np.cos(t)]
    Y[ix] = (-1 if j % 2 == 0 else 1)

X = copy.deepcopy(X.T)
Y = copy.deepcopy(Y.reshape(-1,1).T)

fig, ax = plt.subplots(1,1, figsize=(8,8))


X_plot = np.zeros((D, N*K))
for i in range(0, X.shape[0]):
  for j in range(0, X.shape[1]):
     X_plot[i][j] = plot_quant(X[i][j], bit) 


X2 = np.zeros((D* bit, N*K))
for i in range(0, X.shape[0]):
  for j in range(0, X.shape[1]):
     va = quant(X[i][j], bit) 
     for m_ in range(0, bit): 
       X2[i*bit + m_][j] = va[m_]

X = np.array(X2)

ax.scatter(X_plot[0, :], X_plot[1, :], c=Y.ravel(),alpha=0.8, s=40, cmap=plt.cm.Set1)
ax.set_xlabel('$X$', weight="bold")
ax.set_ylabel('$Y$', weight="bold")

shape_X = X.shape
shape_Y = Y.shape

print ('The shape of X is: ' + str(shape_X))
print ('The shape of Y is: ' + str(shape_Y))

def layer_sizes(X, Y, n_h=4):
    n_x = X.shape[0] # size of input layer
    n_h = n_h
    n_y = Y.reshape(-1,1).T.shape[0] # size of output layer

    return (n_x, n_h, n_y)

def initialize_parameters(n_x, n_h, n_y):
    np.random.seed(42) # we set up a seed so that your output matches ours although the initialization is random.

    W1 = (np.random.rand(n_h, n_x) -0.5)* 0.01
    
    W2 = (np.random.rand(n_y, n_h)-0.5 )* 0.01 # np.random.rand(n_y, n_h) #* 0.01

    
    assert (W1.shape == (n_h, n_x))
    assert (W2.shape == (n_y, n_h))
    
    parameters = {"W1": W1,
                  "W2": W2}
      
    return parameters

def apply_sign(x):
    f = np.vectorize(my_sign)
    return f(x)

def my_sign(x):
    if x >= 0:
      return 1;
    return -1;

def forward_propagation(X, parameters):
    # Retrieve each parameter from the dictionary "parameters"
    W1 = parameters['W1']
    W2 = parameters['W2']
    
    # Implement Forward Propagation
    Z1 = np.dot(apply_sign(W1),X) #+ b1
    A1 = apply_sign(Z1)
    Z2 = np.dot(apply_sign(W2),A1)# + b2
    A2 = apply_sign(Z2)
    
    assert(A2.shape == (1, X.shape[1]))
    
    cache = {"Z1": Z1,
             "A1": A1,
             "Z2": Z2,
             "A2": A2}
    
    return A2, cache


def compute_cost(A2, Y):
    m = Y.shape[1] # number of example

    # Compute the cross-entropy cost
    logprobs = np.dot(Y,np.log(A2).T) + np.dot((1-Y),np.log((1-A2)).T)
    cost = -logprobs/m

    cost = float(np.squeeze(cost))  # makes sure cost is the dimension we expect. E.g., turns [[17]] into 17 
    assert(isinstance(cost, float))
    
    return cost

def backward_propagation(parameters, cache, X, Y):
    m = X.shape[1]
    
    # First, retrieve W1 and W2 from the dictionary "parameters".
    W1 = parameters['W1']
    W2 = parameters['W2']

    # Retrieve also A1 and A2 from dictionary "cache".
    A1 = cache['A1']
    A2 = cache['A2']

    # Backward propagation: calculate dW1, db1, dW2, db2. 
    dZ2 = A2 - Y
    dW2 = (1/m) * np.dot(dZ2,A1.T)
    dZ1 = np.dot(W2.T, dZ2) * (1 - np.power(A1, 2))
    dW1 = (1/m) * np.dot(dZ1, X.T)

    grads = {"dW1": dW1,
             "dW2": dW2}
    
    return grads

def update_parameters(parameters, grads, learning_rate = 1.2):
    # Retrieve each parameter from the dictionary "parameters"
    W1 = parameters['W1']
    W2 = parameters['W2']

    # Retrieve each gradient from the dictionary "grads"
    dW1 = grads['dW1']
    dW2 = grads['dW2']

    # Update rule for each parameter
    W1 = W1 - learning_rate*dW1
    W2 = W2 - learning_rate*dW2

    parameters = {"W1": W1,
                  # "b1": b1,
                  "W2": W2}
                  # "b2": b2}
    
    return parameters

def nn_model(X, Y, n_h, num_iterations = 10000, print_cost=False):
    np.random.seed(42)
    n_x, n_h, n_y = layer_sizes(X, Y, n_h=n_h)
    
    # Initialize parameters
    parameters = initialize_parameters(n_x, n_h, n_y)

    # Loop (gradient descent)
    for i in range(0, num_iterations):
         
        # Forward propagation. Inputs: "X, parameters". Outputs: "A2, cache".
        A2, cache = forward_propagation(X, parameters)
        
        # Cost function. Inputs: "A2, Y, parameters". Outputs: "cost".
        cost = compute_cost(A2, Y)
 
        # Backpropagation. Inputs: "parameters, cache, X, Y". Outputs: "grads".
        grads = backward_propagation(parameters, cache, X, Y)
 
        # Gradient descent parameter update. Inputs: "parameters, grads". Outputs: "parameters".
        parameters = update_parameters(parameters, grads, learning_rate = 1.2)

        # Print the cost every 1000 iterations
        if print_cost and i % 1000 == 0:
          print ("Cost after iteration %i: %f" %(i, cost))
        if i == num_iterations - 1:
          W1 = parameters['W1']
          # b1 = parameters['b1']
          W2 = parameters['W2']
          # b2 = parameters['b2']
          print(W1)
          print()
          # print(b1)
          print()
          print(W2)
          print()
          # print(b2)

    return parameters

def predict(parameters, X):
    # Computes probabilities using forward propagation, and classifies to 0/1 using 0.5 as the threshold.
    A2, cache = forward_propagation(X, parameters)
    # threshold = 0.5 
    # predictions = (A2 > threshold)
    predictions = A2
    return predictions

parameters = nn_model(X, Y, n_h = 12, num_iterations = 10000, print_cost=True)

predictions = predict(parameters, X)
sum = 0
for i in range(0, len(predictions[0])):
  if Y[0][i] == predictions[0][i]: sum += 1

print((sum*100)/len(predictions[0]))
# print ('Accuracy: %d' % float((np.dot(Y,predictions.T) + np.dot(1-Y,1-predictions.T))/float(Y.size)*100) + '%')

def plot_decision_boundary_NN(func, x_input, y_input, x_real, ax=None):
    xx_1, xx_2 = np.mgrid[np.min(x_input[:,0]):np.max(x_input[:,0]):.01, np.min(x_input[:,1]):np.max(x_input[:,1]):.01]
    grid = np.c_[xx_1.ravel(), xx_2.ravel()].T

    grid2 = np.zeros((grid.shape[0]* bit, grid.shape[1]))
    for i in range(0, grid.shape[0]):
      for j in range(0, grid.shape[1]):
        va = quant(grid[i][j], bit) 
        for m_ in range(0, bit): 
          grid2[i*bit + m_][j] = va[m_]

    grid = np.array(grid2)

    y_pred_grid = func(grid).reshape(xx_1.shape)
    print(grid)
    y_pred = func(x_real)
    
    if ax == None:
        fig, ax = plt.subplots(1,1, figsize=(10,10))
        
    contour = ax.contourf(xx_1, xx_2, y_pred_grid, alpha=0.7, cmap="Spectral")
    ax.scatter(x_input[:,0], x_input[:, 1], c=y_pred, s=50, cmap="Spectral", edgecolor="white", linewidth=1)
    
    lims = [np.min([ax.get_xlim(), ax.get_ylim()]),  # min of both axes
            np.max([ax.get_xlim(), ax.get_ylim()]),  # max of both axes
            ]
    ax.set(aspect='equal', 
           xlim=(np.min(x_input[:,0]), np.max(x_input[:,0])), ylim=(np.min(x_input[:,1]),np.max(x_input[:,1])),
           xlabel="$X_1$", ylabel="$X_2$")
    return ax

plot_decision_boundary_NN(lambda x: predict(parameters, x), X_plot.T, Y.T, X)
plt.title("Decision Boundary for hidden layer size " + str(4))

fig, ax = plt.subplots(1,1, figsize=(8,8))


ax.scatter(X_plot[0, :], X_plot[1, :], c=predictions.ravel(),alpha=0.8, s=40, cmap=plt.cm.Set1)
ax.set_xlabel('$X$', weight="bold")
ax.set_ylabel('$Y$', weight="bold")
